@page "/logs"
@using System.Collections.Specialized
@using System.Collections.ObjectModel
@using LogLevel = Another_Mirai_Native.Model.Enums.LogLevel
@inject Shared Shared
@inject IJSRuntime JS
@inject IScrollManager ScrollManager
@inject IScrollListenerFactory ScrollListenerFactory

<MudDataGrid Items="@DisplayLogs" Dense="true" FixedHeader="true" Virtualize="true" id="logContainer">
    <ToolBarContent>
        <MudSpacer></MudSpacer>
        <MudSwitch id="autoScroll" @bind-Value="@AutoScroll" Style="margin: 10px;" Color="Color.Primary" T="bool" CheckedChanged="AutoScrollChecked">自动滚动</MudSwitch>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Time" Title="时间" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Source" Title="插件" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Name" Title="来源" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Detail" Title="消息" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Status" Title="结果" CellClassFunc="@_cellClassFunc" />
    </Columns>
</MudDataGrid>
<div id="scrollBottomItem"/>
<MudOverlay @bind-Visible="Loading" DarkBackground="true" AutoClose="false">
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
</MudOverlay>        
<MudFab Style="position: fixed; right: 10px; bottom: 20px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" OnClick="ScrollToTop" />

<script>
    var resizeTable = () => {
        document.getElementsByClassName('mud-table-container')[0].style.height = document.querySelector('aside').clientHeight - 30 + 'px'
    };
    var scrollTableToBottom = () => {
        const element = document.querySelector('.mud-drop-container table tbody')
        scrollToBottom(element.lastElementChild)
        document.getElementsByTagName('body')[0].scrollTop = document.getElementsByTagName('body')[0].scrollHeight

        //scrollToBottom(document.getElementById('scrollBottomItem'))
    };
    var scrollTableToTop = () => {
        const element = document.querySelector('.mud-table-container')
        element.scrollTop = 0
        document.getElementsByTagName('body')[0].scrollTop = 0
    };
    window.addEventListener('resize', resizeTable)
</script>

@code {
    private MudTheme Theme = new MudTheme();
    public ObservableCollection<LogDisplay> DisplayLogs { get; set; } = new();
    public bool Loading { get; set; } = true;
    public bool AutoScroll { get; set; }
    private IScrollListener? _scrollListener;

    protected override void OnInitialized()
    {
        LogHandler.StartSaveLogs();
        DisplayLogs.Clear();
        foreach (var item in LogHandler.Logs)
        {
            DisplayLogs.Add(LogDisplay.ParseLogModel(item));
        }
        LogHandler.Logs.CollectionChanged += OnLogHandlerLogChanged;
        LogHelper.LogStatusUpdated += OnLogStatusUpdated;
        InvokeAsync(() => StateHasChanged());
        Loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("resizeTable", []);
            _scrollListener = ScrollListenerFactory.Create(null);
        }
    }

    private void OnLogStatusUpdated(int logId, string status)
    {
        var item = DisplayLogs.FirstOrDefault(x=>x.Id == logId);
        if (item != null)
        {
            item.Status = status;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async void OnLogHandlerLogChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if(e.Action != NotifyCollectionChangedAction.Add
            || e.NewItems == null)
        {
            return;
        }
        foreach(LogModel item in e.NewItems)
        {
            DisplayLogs.Add(LogDisplay.ParseLogModel(item));
        }
        await InvokeAsync(() => StateHasChanged());
        await ScrollToBottom();
    }

    private Func<LogDisplay, string> _cellClassFunc => (x) =>
    {
        var pattle = Shared.IsDarkMode ? Theme.PaletteDark : Theme.Palette;
        // string color = (LogLevel)x.Priority switch
        // {
        //     LogLevel.Debug => "",
        //     LogLevel.Error => pattle.Error.ToString(),
        //     LogLevel.Info => "",
        //     LogLevel.Fatal => pattle.ErrorDarken,
        //     LogLevel.InfoSuccess => pattle.Primary.ToString(),
        //     LogLevel.InfoSend => pattle.Success.ToString(),
        //     LogLevel.InfoReceive => pattle.Info.ToString(),
        //     LogLevel.Warning => pattle.Warning.ToString(),
        //     _ => "",
        // };
        string itemClass = (LogLevel)x.Priority switch
        {
            LogLevel.Debug => "",
            LogLevel.Error => "mud-error-text",
            LogLevel.Info => "",
            LogLevel.Fatal => "mud-error-text",
            LogLevel.InfoSuccess => "mud-primary-text",
            LogLevel.InfoSend => "mud-success-text",
            LogLevel.InfoReceive => "mud-info-text",
            LogLevel.Warning => "mud-warning-text",
            _ => "",
        };

        //return $"color: {color};";
        return itemClass;
    };

    private async Task AutoScrollChecked(bool a)
    {
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        if (AutoScroll)
        {
            //await JS.InvokeVoidAsync("scrollTableToBottom", "");
            await ScrollManager.ScrollToBottomAsync(".mud-table-container", ScrollBehavior.Smooth);
            await ScrollManager.ScrollToBottomAsync(_scrollListener.Selector, ScrollBehavior.Smooth);
        }
    }

    private async Task ScrollToTop()
    {
        // await JS.InvokeVoidAsync("scrollTableToTop", "");
        await ScrollManager.ScrollToTopAsync(".mud-table-container", ScrollBehavior.Smooth);
        await ScrollManager.ScrollToTopAsync(_scrollListener.Selector, ScrollBehavior.Smooth);
    }
}
