@page "/"
@inject AuthService _authProvider
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudContainer Style="height: 100%; display: flex; justify-content: center; align-items: center;">
    <MudCard Elevation="19" Style="width: 70%; padding: 10px;">
        <MudCardHeader>
            <h3>后台存储的密码</h3>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="Password" Label="密码" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePassword" AdornmentAriaLabel="显示密码" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color=" Color.Primary" @onclick="LoginClick">连接</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    public string Password { get; set; } = "1234567";

    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        LogHandler.StopSaveLogs();
    }

    void TogglePassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void LoginClick()
    {
        if (!await _authProvider.AuthenticateUser(Password))
        {
            Snackbar.Add("密码错误", Severity.Error);
        }
        else
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }
}